import streamlit as st
from utils.openai_helper import get_openai_streaming_response
from utils.openai_helper import get_openai_response
from helper.crawl_selenium import get_product_info

def main():
    st.set_page_config(layout="wide", page_title="Amazon Chatbot", page_icon="ü§ñ")

    # Sidebar
    st.sidebar.header("Chatbot Configuration")

    # 1) Ch·ªçn m√¥ h√¨nh
    selected_model = st.sidebar.selectbox(
        "Ch·ªçn Model",
        options=["GPT-4o-MINI", "GPT-4", "GPT-4 32k", "Model kh√°c..."]
    )

    # 2) Nh·∫≠p URL c·ªßa s·∫£n ph·∫©m Amazon
    product_url = st.sidebar.text_input("Nh·∫≠p Amazon Product URL")

    # 3) Slider ch·ªçn s·ªë l∆∞·ª£ng review
    num_reviews = st.sidebar.slider("S·ªë l∆∞·ª£ng review", min_value=1, max_value=50, value=10)

    # Kh·ªüi t·∫°o session state cho product data
    if "product_data" not in st.session_state:
        st.session_state.product_data = None

    # 4) N√∫t scrape
    if st.sidebar.button("Scrape"):
        with st.sidebar.status("ƒêang scrape d·ªØ li·ªáu s·∫£n ph·∫©m...") as status:
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang scrape
            st.sidebar.write(f"ƒêang x·ª≠ l√Ω scrape reviews t·ª´: {product_url}")
            
            # G·ªçi h√†m scrape ƒë·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m
            product_data = get_product_info(product_url)
            
            # L∆∞u d·ªØ li·ªáu v√†o session state ƒë·ªÉ s·ª≠ d·ª•ng sau
            st.session_state.product_data = product_data
            
            # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng review theo ng∆∞·ªùi d√πng ch·ªçn
            if "reviews" in product_data and len(product_data["reviews"]) > num_reviews:
                product_data["reviews"] = product_data["reviews"][:num_reviews]
            
            status.update(label="ƒêang t·∫°o t√≥m t·∫Øt s·∫£n ph·∫©m...", state="running")
            
            # T·∫°o prompt ƒë·ªÉ sinh t√≥m t·∫Øt s·∫£n ph·∫©m
            summary_prompt = f"""
            H√£y t·∫°o m·ªôt b·∫£n t√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ s·∫£n ph·∫©m n√†y d·ª±a tr√™n th√¥ng tin sau:
            
            T√™n s·∫£n ph·∫©m: {product_data.get('title', 'Kh√¥ng r√µ')}
            Gi√°: {product_data.get('price', 'Kh√¥ng r√µ')}
            ƒê√°nh gi√°: {product_data.get('rating', 'Kh√¥ng r√µ')}
            S·ªë l∆∞·ª£ng ƒë√°nh gi√°: {product_data.get('review_count', 'Kh√¥ng r√µ')}
            M√¥ t·∫£: {product_data.get('description', 'Kh√¥ng r√µ')}
            
            TH√îNG TIN B·∫¢NG CHI TI·∫æT S·∫¢N PH·∫®M:
            {product_data.get('table_info', 'Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt')}
            
            T√≥m t·∫Øt n√™n bao g·ªìm: ƒê√¢y l√† s·∫£n ph·∫©m g√¨, c√°c t√≠nh nƒÉng ch√≠nh, ƒëi·ªÉm m·∫°nh, gi√° c·∫£, l·ªùi khuy√™n mua h√†ng, v.v.
            """
            
            # G·ªçi OpenAI ƒë·ªÉ t·∫°o t√≥m t·∫Øt
            product_summary = get_openai_response(summary_prompt)
            
            # T·∫°o context t·ª´ reviews ƒë·ªÉ th√™m v√†o system message
            reviews_context = "D∆∞·ªõi ƒë√¢y l√† c√°c ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng v·ªÅ s·∫£n ph·∫©m:\n\n"
            for i, review in enumerate(product_data.get("reviews", [])):
                reviews_context += f"Review #{i+1}:\n"
                reviews_context += f"- Ti√™u ƒë·ªÅ: {review.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}\n"
                reviews_context += f"- Ng∆∞·ªùi ƒë√°nh gi√°: {review.get('author', '·∫®n danh')}\n"
                reviews_context += f"- N·ªôi dung: {review.get('text', 'Kh√¥ng c√≥ n·ªôi dung')}\n"
                reviews_context += f"- Ng√†y: {review.get('date', 'Kh√¥ng r√µ ng√†y')}\n\n"
            
            # C·∫≠p nh·∫≠t system message v·ªõi th√¥ng tin s·∫£n ph·∫©m v√† reviews
            system_message = f"""B·∫°n l√† tr·ª£ l√Ω AI h·ªØu √≠ch, th√¢n thi·ªán v√† trung th·ª±c.
            
            TH√îNG TIN S·∫¢N PH·∫®M:
            T√™n: {product_data.get('title', 'Kh√¥ng r√µ')}
            Gi√°: {product_data.get('price', 'Kh√¥ng r√µ')}
            ƒê√°nh gi√°: {product_data.get('rating', 'Kh√¥ng r√µ')}
            S·ªë l∆∞·ª£ng ƒë√°nh gi√°: {product_data.get('review_count', 'Kh√¥ng r√µ')}
            
            T√ìM T·∫ÆT S·∫¢N PH·∫®M:
            {product_summary}
            
            {reviews_context}
            
            H√£y s·ª≠ d·ª•ng th√¥ng tin tr√™n ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v·ªÅ s·∫£n ph·∫©m n√†y.
            Khi ƒë∆∞·ª£c h·ªèi v·ªÅ ƒë√°nh gi√° ho·∫∑c c·∫£m nh·∫≠n v·ªÅ s·∫£n ph·∫©m, h√£y d·ª±a v√†o c√°c ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng ƒë√£ cung c·∫•p.
            Khi kh√¥ng c√≥ th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi, h√£y th·ª´a nh·∫≠n r·∫±ng b·∫°n kh√¥ng c√≥ ƒë·ªß th√¥ng tin v√† kh√¥ng t·ª± t·∫°o ra th√¥ng tin gi·∫£.
            """
            
            # C·∫≠p nh·∫≠t session state messages history
            if "messages_history" in st.session_state:
                # T√¨m v√† thay th·∫ø system message c≈©
                for i, msg in enumerate(st.session_state.messages_history):
                    if msg.get("role") == "system":
                        st.session_state.messages_history[i] = {"role": "system", "content": system_message}
                        break
                else:
                    # N·∫øu kh√¥ng t√¨m th·∫•y system message, th√™m v√†o ƒë·∫ßu danh s√°ch
                    st.session_state.messages_history.insert(0, {"role": "system", "content": system_message})
            else:
                st.session_state.messages_history = [{"role": "system", "content": system_message}]
            
            # Th√™m tin nh·∫Øn t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng ƒë·ªÉ hi·ªÉn th·ªã t√≥m t·∫Øt s·∫£n ph·∫©m
            st.session_state.conversation.append(("assistant", f"ƒê√£ scrape th√¥ng tin s·∫£n ph·∫©m th√†nh c√¥ng!\n\n{product_summary}"))
            
            status.update(label="Ho√†n t·∫•t!", state="complete")
        
        # Bu·ªôc Streamlit rerun ƒë·ªÉ hi·ªÉn th·ªã thay ƒë·ªïi
        st.rerun()

    # ------------------------------------------------
    # Ph·∫ßn ch√≠nh: giao di·ªán chat
    # ------------------------------------------------

    st.title("Amazon Chatbot")

    # Kh·ªüi t·∫°o session_state ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ h·ªôi tho·∫°i
    if "conversation" not in st.session_state:
        st.session_state.conversation = []
    
    # Kh·ªüi t·∫°o messages_history cho API
    if "messages_history" not in st.session_state:
        st.session_state.messages_history = [
            {"role": "system", "content": "B·∫°n l√† tr·ª£ l√Ω AI h·ªØu √≠ch, th√¢n thi·ªán v√† trung th·ª±c."}
        ]

    # H√†m hi·ªÉn th·ªã m·ªôt tin nh·∫Øn trong khu v·ª±c chat
    # role: 'user' ho·∫∑c 'assistant'
    # text: n·ªôi dung tin nh·∫Øn
    def display_message(role, text):
        # Ng∆∞·ªùi d√πng (hi·ªÉn th·ªã b√™n ph·∫£i, 70% ƒë·ªô r·ªông)
        if role == "user":
            st.markdown(
                f"""
                <div style='text-align: right; margin: 10px; display: flex; justify-content: flex-end; align-items: flex-start;'>
                    <div style='display: inline-block; background-color: #DCF8C6; padding: 8px 12px; border-radius: 8px; max-width: 70%; margin-right: 8px;'>
                        {text}
                    </div>
                    <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #128C7E; color: white; display: flex; justify-content: center; align-items: center; font-weight: bold;'>
                        <span>üë§</span>
                    </div>
                </div>
                """,
                unsafe_allow_html=True
            )
        # Bot (hi·ªÉn th·ªã 100% ƒë·ªô r·ªông, b√™n d∆∞·ªõi c√¢u h·ªèi)
        else:
            st.markdown(
                f"""
                <div style='margin: 10px; display: flex; align-items: flex-start;'>
                    <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #4285F4; color: white; display: flex; justify-content: center; align-items: center; margin-right: 8px; font-weight: bold;'>
                        <span>ü§ñ</span>
                    </div>
                    <div style='display: inline-block; background-color: #F1F0F0; padding: 8px 12px; border-radius: 8px; max-width: 90%;'>
                        {text}
                    </div>
                </div>
                """,
                unsafe_allow_html=True
            )

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ c√°c tin nh·∫Øn
    for role, content in st.session_state.conversation:
        display_message(role, content)

    # Input c·ªßa chat
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

    # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ·∫•n Enter
    if user_input:
        # Th√™m tin nh·∫Øn c·ªßa user v√†o h·ªôi tho·∫°i hi·ªÉn th·ªã UI
        st.session_state.conversation.append(("user", user_input))
        
        # Th√™m tin nh·∫Øn user v√†o history cho API
        st.session_state.messages_history.append({"role": "user", "content": user_input})
        
        # Hi·ªÉn th·ªã tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
        display_message("user", user_input)
        
        # T·∫°o placeholder ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn ƒëang typing
        typing_placeholder = st.empty()
        typing_placeholder.markdown(
            """
            <div style='margin: 10px; display: flex; align-items: flex-start;'>
                <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #4285F4; color: white; display: flex; justify-content: center; align-items: center; margin-right: 8px; font-weight: bold;'>
                    <span>ü§ñ</span>
                </div>
                <div style='display: inline-block; background-color: #F1F0F0; padding: 8px 12px; border-radius: 8px;'>
                    <i>ƒêang nh·∫≠p...</i>
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )
        
        try:
            # G·ªçi OpenAI API v√† hi·ªÉn th·ªã k·∫øt qu·∫£ streaming v·ªõi to√†n b·ªô l·ªãch s·ª≠
            full_response = ""
            for response_chunk in get_openai_streaming_response(st.session_state.messages_history):
                if response_chunk:
                    full_response += response_chunk
                    # C·∫≠p nh·∫≠t ph·∫£n h·ªìi ƒëang x√¢y d·ª±ng
                    typing_placeholder.markdown(
                        f"""
                        <div style='margin: 10px; display: flex; align-items: flex-start;'>
                            <div style='width: 36px; height: 36px; border-radius: 50%; background-color: #4285F4; color: white; display: flex; justify-content: center; align-items: center; margin-right: 8px; font-weight: bold;'>
                                <span>ü§ñ</span>
                            </div>
                            <div style='display: inline-block; background-color: #F1F0F0; padding: 8px 12px; border-radius: 8px; max-width: 90%;'>
                                {full_response}‚ñå
                            </div>
                        </div>
                        """,
                        unsafe_allow_html=True
                    )
            
            # X√≥a placeholder typing v√† th√™m tin nh·∫Øn ho√†n ch·ªânh v√†o h·ªôi tho·∫°i UI
            typing_placeholder.empty()
            st.session_state.conversation.append(("assistant", full_response))
            
            # Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o history cho OpenAI API
            st.session_state.messages_history.append({"role": "assistant", "content": full_response})
            
        except Exception as e:
            # X·ª≠ l√Ω l·ªói n·∫øu c√≥
            error_message = f"C√≥ l·ªói x·∫£y ra: {str(e)}"
            typing_placeholder.empty()
            st.session_state.conversation.append(("assistant", error_message))
            display_message("assistant", error_message)

        # Reset √¥ input v·ªÅ r·ªóng ƒë·ªÉ s·∫µn s√†ng cho c√¢u h·ªèi ti·∫øp theo
        st.rerun()

if __name__ == "__main__":
    main()