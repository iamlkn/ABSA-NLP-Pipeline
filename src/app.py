# app.py
import streamlit as st
import pandas as pd
from utils.openai_helper import get_openai_streaming_response, get_openai_response
from helper.crawl_selenium import get_product_info, get_ebay_reviews, get_youtube_comments

def main():
    st.set_page_config(layout="wide", page_title="Multi-source Chatbot", page_icon="ü§ñ")
    st.sidebar.header("Chatbot Configuration")

    # Kh·ªüi t·∫°o session state
    if 'conversation' not in st.session_state:
        st.session_state.conversation = []
    if 'messages_history' not in st.session_state:
        st.session_state.messages_history = [{
            'role': 'system',
            'content': 'B·∫°n l√† tr·ª£ l√Ω AI h·ªØu √≠ch.'
        }]
    if 'current_items' not in st.session_state:
        st.session_state.current_items = []  # l∆∞u reviews/comments v·ª´a crawl

    # Ch·ªçn ngu·ªìn d·ªØ li·ªáu: Amazon, eBay ho·∫∑c YouTube
    source = st.sidebar.selectbox("Ch·ªçn ngu·ªìn d·ªØ li·ªáu", ["Amazon", "eBay", "YouTube"])
    url = st.sidebar.text_input("Nh·∫≠p URL s·∫£n ph·∫©m/video")
    num_comments = st.sidebar.slider("S·ªë l∆∞·ª£ng comments/reviews", min_value=1, max_value=50, value=10)

    # N√∫t Scrape
    if st.sidebar.button("Scrape"):
        if not url:
            st.sidebar.error("Vui l√≤ng nh·∫≠p URL!")
        else:
            # X√≥a s·∫°ch conversation c≈© ƒë·ªÉ ch·ªâ hi·ªÉn th·ªã s·∫£n ph·∫©m m·ªõi
            st.session_state.conversation = []

            with st.sidebar.status("ƒêang crawl d·ªØ li·ªáu..."):
                # G·ªçi h√†m ph√π h·ª£p theo ngu·ªìn
                if source == "Amazon":
                    data = get_product_info(url)
                    items = data.get('reviews', [])
                elif source == "eBay":
                    data = get_ebay_reviews(url, num_comments)
                    items = data.get('comments', [])
                else:
                    data = get_youtube_comments(url, num_comments)
                    items = data.get('comments', [])

                # L∆∞u d·ªØ li·ªáu v√†o session
                st.session_state.product_data = data
                st.session_state.current_items = items

                # Xu·∫•t d·ªØ li·ªáu th√¥ ra CSV ƒë·ªÉ l∆∞u tr·ªØ
                df = pd.DataFrame(items)
                filename = f"{source.lower()}_data.csv"
                df.to_csv(filename, index=False, encoding='utf-8-sig')
                st.sidebar.success(f"D·ªØ li·ªáu crawl ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {filename}")
                # Cho ph√©p t·∫£i file CSV
                with open(filename, 'rb') as f:
                    st.sidebar.download_button(
                        label="T·∫£i CSV",
                        data=f,
                        file_name=filename,
                        mime='text/csv'
                    )

                # T√≥m t·∫Øt v√† l∆∞u context chi ti·∫øt
                summary_prompt = f"D∆∞·ªõi ƒë√¢y l√† c√°c n·ªôi dung ng∆∞·ªùi d√πng t·ª´ {source}:\n"
                for i, it in enumerate(items, start=1):
                    summary_prompt += f"Review {i}: {it.get('text')}\n"
                summary = get_openai_response(summary_prompt)

                # X√¢y d·ª±ng messages_history ch·ªâ ch·ª©a context m·ªõi
                system_content = f"B·∫°n l√† tr·ª£ l√Ω AI. D∆∞·ªõi ƒë√¢y l√† t√≥m t·∫Øt n·ªôi dung t·ª´ {source}:\n{summary}\n" + summary_prompt
                st.session_state.messages_history = [
                    {'role': 'system', 'content': system_content}
                ]

                # Th√™m tin nh·∫Øn kh·ªüi t·∫°o v√†o conversation
                st.session_state.conversation.append((
                    'assistant',
                    f"Ho√†n th√†nh crawl {source}!\n{summary}"
                ))
            # Reload trang ƒë·ªÉ c·∫≠p nh·∫≠t chat area
            st.rerun()

    # Chat area
    st.title("Multi-source Chatbot")

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for role, msg in st.session_state.conversation:
        if role == 'user':
            st.markdown(f"**B·∫°n:** {msg}")
        else:
            st.markdown(f"**Bot:** {msg}")

    # Input chat
    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi...")
    if user_input:
        # Append user message and call OpenAI for any question (bao g·ªìm h·ªèi s·ªë l∆∞·ª£ng)
        st.session_state.conversation.append(('user', user_input))
        st.session_state.messages_history.append({'role': 'user', 'content': user_input})

        full_resp = ''
        for chunk in get_openai_streaming_response(st.session_state.messages_history):
            full_resp += chunk

        st.session_state.conversation.append(('assistant', full_resp))
        st.session_state.messages_history.append({'role': 'assistant', 'content': full_resp})
        st.rerun()

if __name__ == '__main__':
    main()
